#include <string>
#include <iostream>
#include <ctype.h>
#include <map>
#include <fstream>
#include <algorithm>
using namespace std;
string prepare(string text)
{
	int i = 0;
	int size = text.length();
	while (i < size)
	{
		if (ispunct(text[i])) text[i] = ' ';
		if (text[i] <= 'Z' && text[i] >= 'A')
			text [i] = text [i] - ('Z' - 'z');
		i++;
	}
	i = 0;
	while ((i < size) && (text[i] != ' ')) i++;
	string w;
	for (int k = 0; k <= i-1; k++)
		w = w + text[k];
	return w;
}
int main()
{
	int i, N;
	cin >> N;
	map <string, int> m;
	ifstream fin;
	fin.open("fin.txt", ios::in);
	ofstream fout;
	fout.open("fout.txt", ios::out);
	int num = 0;
	if (fin.is_open())
	{
		string original_text;
		while (!fin.eof())
		{
			fin >> original_text;
			num++; 
			string word = prepare(original_text);
			if (num == 1) m = { { word, 1 } };
			int flag = 0;
			if (num > 1)
			{
				for (map <string, int>::iterator it = m.begin(); it != m.end(); it++)
					if ((it->first) == word)
					{
						it->second++;
						flag = 1;
						break;
					}
				if (flag != 1)
				{
					m.insert(pair<string, int>(word, 1));
				}		
			}
		} 
	}	
	for (map <string, int>::iterator it = m.begin(); it != m.end(); it++)
	{
		if (it->second == N) fout << it->first << endl;
	}
	fin.close();
	fout.close();
	return 0;
}

